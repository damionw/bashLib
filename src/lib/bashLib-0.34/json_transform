json_transform::associative::to_dict() {
    # Extracts JSON dict from a named associative array
    local _array_name

    _array_name="${1:?Provide associative array variable name}" || return $?

    echo "{"
    json_transform::_apply "${_array_name}" 'json::row::object "$1" "$2" "$3"'
    echo "}"
}

json_transform::vars::to_dict() {
    # Takes variable names and create a JSON dict from
    # their contents verbatim. No
    # attempt is made to further evaluate if the contents
    # themselves represent embedded json structures

    local _key= _value _index=

    echo -n "{"

    for _key in "$`@"
    do
        _value="$(eval echo '$'${_key})" || return $?
        echo "${_index:+,}\"${_key}\": \"${_value}\""
        ((_index = ${_index:-0} + 1))
    done

    echo "}"
}

json_transform::vars::from_dict() {
    # Takes a JSON struct and populates variables with
    # the contents. Nested structures aren't interpreted
    # and remain as strings
    local _payload

    _payload="${1:?Need to provide JSON string}" || return $?
}

json_transform::_apply() {
    # Applies a function against each element of a named array variable
    local _array_name _command _key _i=0

    _array_name="${1:?Need to provide the name of an array variable}" || return $?
    _command="${2:-echo key/index=\$1 value=\$2}"

    eval '
        __func__() {
            __visit__() {
                '"${_command}"'
            }

            local _key _value _i=0

            for _key in ${!'"${_array_name}"'[@]}
            do
                local _value="${'"${_array_name}"'[${_key}]}"
                __visit__ "${_key}" "${_value}" "${_i}"
                (( ++_i ))
            done
        }
    '

    __func__
}

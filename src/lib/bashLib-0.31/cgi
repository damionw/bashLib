cgi::requests_prefix() {
    local _default="cgi::request::"

    if [ -n "${1}" -o -z "${__CGI_REQUEST_PREFIX__}" ]
    then
        export __CGI_REQUEST_PREFIX__="${1:-${_default}}"
    fi

    if [ -z "${1}" ]
    then
        echo "${__CGI_REQUEST_PREFIX__}"
    fi

    true
}

cgi::get_parameters() {
    local _regex="$(echo "${@}" | list::to_regex)"

    echo "${QUERY_STRING}" |
    tr '\&' '\n' |
    sed -e 's/=/ /1' |
    ([ -z "${_regex}" ] && cat || egrep -i "^(${_regex})[ ]")
}

cgi::request_handler() {
    local _prefix="$(cgi::requests_prefix)"

    local _function_name="$(
        echo "${PATH_INFO}" |
        sed -e 's|^/||g' -e 's|/|::|g' |
        tr 'A-Z' 'a-z'
    )"

    local HTTP_CODE=(
        [200]="OK"
        [400]="Bad Request"
        [403]="Forbidden"
        [404]="Not Found"
        [405]="Method Not Allowed"
        [500]="Internal Server Error"
    )

    local _status

    if [[ -z "${_function_name}" ]]
    then
        cgi::request_manifest
        return
    fi

    (declare -F | awk '{print $NF;}' | grep -q "^${_prefix}${_function_name}$") || {
        _status=$?

        cgi::request_error 404 "$(
            echo "${_function_name} not available via url ${SCRIPT_NAME}${PATH_INFO}"
        )" text/plain

        return ${_status}
    }

    local _response _parameters=$(cgi::get_parameters)

    _response="$("${_prefix}${_function_name}" ${_parameters})" || {
        _status=$?

        local _error_reponse="${_response}"

        # Try to let the handler provide an error content generator first
        _response="$("${_prefix}${_function_name}::error_content" ${_parameters})" || {
            _response="$(
                cgi::request_error 500 "$(
                    echo "${_function_name} failed via url ${SCRIPT_NAME}${PATH_INFO}"
                    echo "${_error_response}"
                )" text/plain
            )"
        }

        echo "${_response}"
        return ${_status}
    }

    echo "${_response}"
}

cgi::response_header() {
    local _code=${1:-200}
    local _content_type="${2:-application/json}"

    echo "HTTP/1.1 ${_code} ${HTTP_CODE[${_code}]}"
    echo "Content-type: ${_content_type}"
    echo ""
}

cgi::request_error() {
    local _status=$?
    local _code="${1}"
    local _content="${2:-Unspecified Error}"
    local _type="${3:-text/plain}"

    cgi::response_header "${_code}" "${_type}"
    echo "${_content}"
    return ${_status}
}

# cgi::_default_error_content() {
#     local _function="${2}" _details="${3}"
#
#     echo "text/plain"
#     echo "Function: ${_function}"
#     echo "--------------------------------"
#     echo "${_details}"
#     echo "--------------------------------"
# }


cgi::request_manifest() {
    # Produce a list of api functions

    local _prefix="$(cgi::requests_prefix)"
    local _function _separator

    cgi::response_header 200 application/json

    declare -F |
    awk '{print $NF;}' |
    grep "^${_prefix}" |
    grep -v '::error_content$' |
    sed -e "s|^${_prefix}||g" -e 's|::|/|g' | {
        echo "["

        while read _function
        do
            echo "${_separator}\"http://${HTTP_HOST}${SCRIPT_NAME}/${_function}\""
            _separator=","
        done

        echo "]"
    }
}
 

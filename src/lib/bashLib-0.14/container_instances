#!/usr/bin/env bash

first_name="${BASH_SOURCE[0]}"
actual_name="$(readlink -f "${first_name}")"
local_path="$(dirname "${actual_name}")"

. "${local_path}/logging"
. "${local_path}/arguments"
. "${local_path}/tabular"

container::instance::invoke() {
    sudo -A docker "$@"
}

container::instance::separator() {
    echo "|"
}

container::instance::instances() {
    eval "$(arguments::formatter "$@")"

    local -a _filters=()

    local _instance_name="${kwargs["instance"]:-${args[0]}}"
    local _status="${kwargs["status"]:-${args[1]}}"
    local _sep="${kwargs["separator"]:-$(container::instance::separator)}"

    if [ -n "${_instance_name}" ]
    then
        _filters[${#_filters[@]}]="--filter=name=${_instance_name}"
    fi

    if [ -n "${_status}" ]
    then
        _filters[${#_filters[@]}]="--filter=status=${_status}"
    fi

    echo "Id${_sep}Name${_sep}State"

    local _rows

    _rows="$(
        container::instance::invoke ps -a "${_filters[@]}" | awk '{
            if (NR == 1) {
                loc = index($0, "STATUS");
            }
            else if (loc > 0) {
                split(substr($0, loc), ar, " ");
                status = ar[1];
                printf("%s%s%s%s%s\n", $1, sep, $2, sep, status);
            }
        }' sep="${_sep}"
    )" || return $?

    if [ "$(echo "${_rows}" | wc -l)" -lt 1 ]
    then
        return 125
    fi

    echo "${_rows}"
}

container::instance::get_instance_id() {
    container::instance::instances "$@" |
    tabular::apply 'echo ${_column_id}' "$(container::instance::separator)"
}

container::instance::image() {
    eval "$(arguments::formatter "$@")"

    local _image="${kwargs["image"]:-${args[0]:?Provide a container image}}"
    local _tag="${kwargs["tag"]:-${args[1]:-"-latest"}}"

    local _matches="$(
        container::instance::invoke images "${_image}" |
        awk '{if ($2 == tag) {print $0;}}' tag="${_tag}" |
        wc -l
    )"

    if [ ${_matches} -gt 0 ]
    then
        logging::info "Image ${_label} tagged ${_tag} is present"
        return 0
    fi

    logging::warning "Importing image ${_image} tag ${_tag}"
    container::instance::invoke pull "${_image}:${_tag}"
}

container::instance::start() {
    # arguments: <group name> <base image> <service instance name> [<startup_script> [<installation_script>]]

    eval "$(arguments::formatter "$@")"

    local _instance_name="${kwargs["instance"]:-${args[0]:?Provide an instance name}}"

    #------------------------------------
    # Detect running instance
    #------------------------------------
    local _container_id="$(container::instance::get_instance_id instance="${_instance_name}" status="running")"

    if [ -n "${_container_id}" ]
    then
        logging::info "${_instance_name} is already running"
        echo "${_instance_name}"
        return 0
    fi

    #------------------------------------
    # (re)start stopped instance
    #------------------------------------
    local _container_id="$(container::instance::get_instance_id instance="${_instance_name}" status="exited")"

    if [ -n "${_container_id}" ]
    then
        logging::warning "Restarting stopped service instance(s) ${_instance_name}"

        if container::instance::invoke start "${_container_id}"
        then
            echo "${_instance_name}"
            return 0
        fi
    fi

    #------------------------------------
    # Create new instance from base image
    #------------------------------------
    logging::warning "Cleaning up previous service instance(s) of ${_instance_name}"

    # Cleanup all prexisting containers
    container::instance::cleanup instance="${_instance_name}"

    local _image="${kwargs["image"]:-${args[1]:?Provide a container image}}" ### <image>[:<tag>] ###
    local _tag="${kwargs["tag"]:-${args[2]:-latest}}"
    local _startup_script="${kwargs["startup"]}"
    local _install_script="${kwargs["install"]}"
    local _privileged= # --privileged
    local _temp_folder="$(mktemp -d)"

    # Prep default startup and installer scripts
    {
        (echo "#! /usr/bin/env bash"; echo true) |
        tee "${_temp_folder}/startup" |
        tee "${_temp_folder}/install"
    } >/dev/null

    # Prep startup script
    if [ -n "${_startup_script}" -a -e "${_startup_script}" ]
    then
        cp "${_startup_script}" "${_temp_folder}/startup"
    fi

    # Prep installation script
    if [ -n "${_install_script}" -a -e "${_install_script}" ]
    then
        cp "${_install_script}" "${_temp_folder}/install"
    fi

    chmod 755 "${_temp_folder}/install" "${_temp_folder}/startup"

    for ((i=0; i < 2; ++i)) {
        # Try and 'boot' from a prepared image

        container::instance::invoke run \
            --name="${_instance_name}" \
            ${_privileged} \
            --detach \
            --volume="${_temp_folder}:/mnt/boot" \
            "${_instance_name}" \
            /bin/bash -cx "/mnt/boot/startup && exec sleep 86400"

        if [ $? = 0 ]
        then
            logging::info "Started instance '${_instance_name}'"
            echo "${_instance_name}"
            return 0
        fi

        logging::warning "Configuring new image for instance '${_instance_name}'"

        # No image exists, so 'install' from the base image
        container::instance::image "${_image}:${_tag}"

        local _uuid="$(uuidgen)" # Temporary name for the image build container

        # Create a new container and initialize/install components and wait while it runs
        container::instance::invoke run \
            --name="${_uuid}" \
            ${_privileged} \
            --volume="${_temp_folder}:/mnt/boot" \
            "${_image}:${_tag}" \
            /bin/sh -c '/mnt/boot/install'

        logging::warning "Install status = $?"

        # Commit our new image
        container::instance::invoke commit \
            "${_uuid}" \
            "${_instance_name}"

        container::instance::invoke rm "${_uuid}"
    }

    logging::warning "Couldn't create or start ${_instance_name}"
    return 255
}

container::instance::stop() {
    eval "$(arguments::formatter "$@")"

    local _instance_name="${kwargs["instance"]:-${args[0]:?Provide an instance name}}"
    local _container_id=

    while read _container_id && test -n "${_container_id}"
    do
        logging::warning "Stopping instance ${_instance_name} as ${_container_id}"
        container::instance::invoke kill "${_container_id}"
    done <<< "$(container::instance::get_instance_id instance="${_instance_name}" status="running")"
}

container::instance::cleanup() {
    eval "$(arguments::formatter "$@")"

    local _instance_name="${kwargs["instance"]:-${args[0]:?Provide an instance name}}"
    local _container_id

    container::instance::stop instance="${_instance_name}"

    while read _container_id && test -n "${_container_id}"
    do
        logging::warning "Removing instance ${_instance_name} as ${_container_id}"
        container::instance::invoke rm "${_container_id}"
    done <<< "$(container::instance::get_instance_id instance="${_instance_name}")"

    container::instance::invoke rmi "${_instance_name}"
}

container::instance::rebuild() {
    # Parameters are the same as container::instance::start
    eval "$(arguments::formatter "$@")"

    local _instance_name="${kwargs["instance"]:-${args[0]:?Provide an instance name}}"

    container::instance::stop instance="${_instance_name}"
    container::instance::cleanup instance="${_instance_name}"
    container::instance::start "$@"
}

container::instance::console() {
    eval "$(arguments::formatter "$@")"

    local _instance_name="${kwargs["instance"]:-${args[0]:?Provide an instance name}}"

    while read _container_id && test -n "${_container_id}"
    do
        logging::warning "Connecting to instance ${_instance_name} as ${_container_id}"
        container::instance::invoke exec -i -t "${_container_id}" /bin/bash <&2 >&2
        return $?
    done <<< "$(container::instance::get_instance_id instance="${_instance_name}" status="running")"

    logging::error "Instance '${_instance_name}' isn't running"
    return 255
}
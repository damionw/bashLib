#! /usr/bin/env bash

first_name="${BASH_SOURCE[0]}"
actual_name="$(readlink -f "${first_name}")"
local_path="$(dirname "${actual_name}")"

. "${local_path}/logging"
. "${local_path}/tabular"

url::split() {
#   <protocol>://<username>[:<password]@<host>/<path>[?...]

    local _url="${1:?Need to provide a URL}"

    local _contents="$(
        echo "${_url}" | sed \
            -e 's/^\([a-z][a-z]*\)[\:]/_http_protocol="\1"|/1' \
            -e 's/[|][/][/]\([^|:]*\)[\:]\([^\@]*\)[\@]/|_http_username="\1"|_http_password="\2"|\/\//1' \
            -e 's/[|][/][/]\([^|@]*\)[\@]/|_http_username="\1"|\/\//1' \
            -e 's/[|][/][/]\([^|\/]*\)[\/]/|_http_host="\1"|\/\//1' \
            -e 's/[|][/][/]\([^|\?]*\)[\/]*/|_http_path="\1"|\/\//1' \
            -e 's/[|][/][/]//1' \
            -e 's/[\?\&]\([[:alnum:]]\+[\=][^\?\&]*\)/|_http_urlparameter_\1/g' \
            -e 's/[|]/\n/g'
    )"

    echo "${_contents}"

    # (re)Compile the urlparameters
    echo "${_contents}" |
    grep '^_http_urlparameter_'  |
    sed -e 's/^_http_urlparameter_//g' |
    tabular::transpose "&" |
    sed -e 's/\&$//g' -e 's/^/_http_urlparameters="/g' -e 's/$/"/'
}

url::urlshell() {
    local -a _parameters=()
    local _use_global=false

    for _parameter in "$@"
    do
        case "${_parameter}" in
            --global)
                _use_global=true
                ;;

            --*)
                ;;

            *)
                _parameters[${#parameters[@]}]="${_parameter}"
                ;;
        esac
    done

    url::split "${_parameters[0]}" |
    sed -e '/^[\t ]*$/d' |
    ("${_use_global}" && cat || sed '-e s/^/local /g')
}

url::plain() {
    eval "$(url::urlshell "$@")"
    echo "${_http_protocol}://${_http_host}/${_http_path}${_http_parameters:+?}${_http_parameters}"
}

# Gleaned from https://stackoverflow.com/questions/296536/how-to-urlencode-data-for-curl-command
url::encode() {
  local string="${1:-$(cat)}"
  local strlen=${#string}
  local encoded=""
  local pos c o

  for (( pos=0 ; pos<strlen ; pos++ )); do
     c=${string:$pos:1}
     case "$c" in
        [-_.~a-zA-Z0-9] ) o="${c}" ;;
        * )               printf -v o '%%%02x' "'$c"
     esac
     encoded+="${o}"
  done

  echo "${encoded}"    # You can either set a return variable (FASTER) 
}

# Returns a string in which the sequences with percent (%) signs followed by
# two hex digits have been replaced with literal characters.
url::decode() {

  # This is perhaps a risky gambit, but since all escape characters must be
  # encoded, we can replace %NN with \xNN and pass the lot to printf -b, which
  # will decode hex for us

  local _content="${1:-$(cat)}"
  printf -v REPLY '%b' "${_content//%/\\x}" # You can either set a return variable (FASTER)

  echo "${REPLY}"  #+or echo the result (EASIER)... or both... :p
}

url::simple_request() {
    eval "$(arguments::formatter "$@")"

    local _url="${kwargs["url"]:-${args[0]:?'Needs a URL'}}"
    local _type="${kwargs["method"]:-${args[1]:-GET}}"
    local _content="${kwargs["content"]:-${args[2]:-'{}'}}"
    local _http_username="${kwargs["default_username"]:-}" # Allow default via parameters
    local _http_password="${kwargs["default_password"]:-}" # Allow default via parameters

    url::simple_request_positional \
        "${_url}" \
        "${_type}" \
        "${_content}" \
        "${_http_username}" \
        "${_http_password}" \
}

url::simple_request_positional() {
    local _url="${1:?'Needs a URL'}"
    local _type="${2:-GET}}"
    local _content="${3:-'{}'}}"
    local _http_username="${4:-}" # Allow default via parameters
    local _http_password="${5:-}" # Allow default via parameters

    eval "$(url::urlshell "${_url}")"

    # Reconstruct URL without auth info
    _url="${_http_protocol}://${_http_host}/${_http_path}${_http_urlparameters:+?}${_http_urlparameters}"

    logging::debug "${_type} ${_url}"

    curl \
        -d "${_content}" \
        -s \
        -X ${_type} \
        ${_http_username:+-u} ${_http_username:+${_http_username}${_http_password:+:${_http_password}}} \
        -H "Content-Type: application/json" \
        "${_url}"
}

#!/usr/bin/env bash

#===================================================================================
#                          Import tools library
#===================================================================================
. "$(bashlib --lib)"

#===================================================================================
#                              Logging Options
#===================================================================================
logging::set_severity info

#===================================================================================
#                              Help Message
#===================================================================================
showhelp() {
    local _synopsis="
        Maintain running containers
    "

    local -A _keywords=(
        [start]="Start a container"
        [stop]="Stop a container"
        [rebuild]="Rebuild a container"
        [cleanup]="Delete a container"
        [instance:]="Specify a container instance"
        [image:]="Specify an image name"
        [tag:]="Specify an image tag (default: latest)"
        [version]="Produce the version string"
        [help]="Display instructions"
    )

    local _terms="$(echo "${@}" | awk -F, '{for (i=1; i <= NF; ++i) {print $i;}}')"
    local _topic

    local _contents="$(
        echo "${_terms}" | awk -F: '{printf("%s[--%s%s]", sep, $1, (NF == 2 ? sprintf("=<%s>", $1) : "")); sep=" "}'
        echo -en "${_synopsis:+\n\n}"
        echo "${_synopsis}" | sed -e 's/^[ ]*//g' -e '/^[ ]*$/d'

        echo "${_terms}" | {
            _prefix="\n"

            while read _topic
            do
                if [ -n "${_keywords["${_topic}"]}" ]
                then
                    _fill="$(for ((i=$(echo -n "${_topic}" | wc -c); i < 15; ++i)); do echo -n " "; done)"
                    echo -e "${_prefix}--${_topic}${_fill}${_keywords["${_topic}"]}" | sed -e 's/^./    &/g'
                    _prefix=""
                fi
            done
        }
    )"

    echo "Usage: $0 ${_contents}" >&2
}

#===================================================================================
# NOTE: There is a bug in getopts where not specifying at least one short option
#       will cause the first non option parameter to be discarded. Here, we just
#       use -h (help)
#===================================================================================
long_options="help,version,debug,info,warning,error,fatal,start,stop,rebuild,cleanup,status,instance:,name:,image:,tag:"

OPTION_TEMP=$(getopt -a -o hv --long ${long_options} -- "$@")

if [ $? != 0 ]
then
    logging::fatal "Invalid command line options ${OPTION_TEMP}"
fi

eval set -- "$OPTION_TEMP"

#===================================================================================
#                       Process command line parameters
#
# NOTE: The command line parameters are available for scripts which
#       source this file.
#===================================================================================
action=
image=
tag=
instance_name=

while true
do
    case "$1" in
        --debug|--info|--warning|--error|--fatal)
            logging::set_severity "$(echo "${1}" | sed -e 's/^[\-]*//g')"
            shift
            ;;

        --start|--stop|--rebuild|--cleanup|--status)
            action="$(echo "${1}" | sed -e 's/^[-]*//g')"
            shift
            ;;

        --image)
            image="$2"
            shift 2
            ;;

        --instance|--name)
            instance_name="$2"
            shift 2
            ;;

        --tag)
            tag="$2"
            shift 2
            ;;

        --version)
            bashlib::version
            exit 0
            ;;

        --)
            shift
            break
            ;;

        *)
            showhelp "${long_options}" >&2
            exit 0
            ;;
    esac
done

if [ -z "${instance_name}" ]
then
    logging::fatal "An instance name must be provided"
fi

#===================================================================================
#                             Perform selected action
#===================================================================================
case "${action}" in
    start)
        container::start instance="${instance_name}" image="${image}" tag="${tag}"
        exit $?
        ;;

    rebuild)
        container::rebuild instance="${instance_name}" image="${image}" tag="${tag}"
        exit $?
        ;;

    status)
        container::instance instance="${instance_name}"
        exit $?
        ;;

    stop)
        container::stop instance="${instance_name}"
        exit $?
        ;;

    *)
        logging::fatal "Unknown or invalid action '${action}'"
        ;;
esac
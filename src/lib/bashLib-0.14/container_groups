#!/usr/bin/env bash

first_name="${BASH_SOURCE[0]}"
actual_name="$(readlink -f "${first_name}")"
local_path="$(dirname "${actual_name}")"

. "${local_path}/logging"
. "${local_path}/tabular"
. "${local_path}/container_instances"

container::group::separator() {
    echo "..."
}

container::group::grouped_containers() {
    header() {
        {
            echo "Id"
            echo "Instance"
            echo "Group"
            echo "Service"
            echo "Tag"
            echo "State"
        } | tabular::transpose "${_sep}"
    }

    formatter() {
        if [ "${_column_name}" != "${_column_name/${_group_sep}}" ]
        then
            {
                local _group="${_column_name/${_group_sep}*}"
                local _suffix="${_column_name/*${_group_sep}}"
                local _service="${_suffix/:*}"
                local _tag="${_suffix/*:}"

                echo "${_column_id}"
                echo "${_column_name}"
                echo "${_group}"
                echo "${_service}"
                echo "${_tag}"
                echo "${_column_state}" | tr '[A-Z]' '[a-z]'
            } | tabular::transpose "${_sep}"
        fi
    }

    local _group_sep="$(container::group::separator)"
    local _sep="$(container::instance::separator)"

    container::instance::instances | {
        header
        tabular::apply formatter "${_sep}"
    }
}

container::group::groups() {
    local _sep="$(container::instance::separator)"
    container::group::grouped_containers |
    tabular::apply 'echo "${_column_group}"' "${_sep}" |
    sort -u
}

container::group::container_group() {
    eval "$(arguments::formatter "$@")"

    local _group_name="${kwargs["group"]:-${args[0]:?Provide a group name}}"
    local _sep="$(container::instance::separator)"

    container::group::grouped_containers |
    tabular::filter '[ "${_column_group}" = "'"${_group_name}"'" ]' "${_sep}"
}

container::group::format_instance_name() {
    eval "$(arguments::formatter "$@")"

    local _group_name="${kwargs["group"]:-${args[0]:?Provide a group name}}"
    local _service_name="${kwargs["service"]:-${args[1]:?Provide a service name}}"

    {
        echo "${_group_name}"
        echo "${_service_name}"
    } | tabular::transpose "$(container::group::_separator)"
}

container::group::start_instance() {
    # Start an instance in a container 'group'

    eval "$(arguments::formatter "$@")"

    local _group_name="${kwargs["group"]:-${args[0]:?Provide a group name}}"
    local _service_name="${kwargs["service"]:-${args[1]:?Provide a service name}}"
    local _image="${kwargs["image"]:-${args[2]}}"
    local _tag="${kwargs["tag"]:-${args[3]:-latest}}"
    local _startup_script="${kwargs["startup"]}"
    local _install_script="${kwargs["install"]}"

    local _instance_name="$(
        container::group::format_instance_name group="${_group_name}" service="${_service_name}"
    )"

    container::instance::start \
        instance="${_instance_name}" \
        tag="${_tag}" \
        startup="${_startup_script}" \
        install="${_install_script}" \
        image="${_image}"
}

container::group::stop_instance() {
    eval "$(arguments::formatter "$@")"

    local _group_name="${kwargs["group"]:-${args[0]:?Provide a group name}}"
    local _service_name="${kwargs["service"]:-${args[1]:?Provide a service name}}"

    local _instance_name="$(
        container::group::format_instance_name group="${_group_name}" service="${_service_name}"
    )"

    container::instance::stop instance="${_instance_name}"
}

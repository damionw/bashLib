#! /usr/bin/env bash

first_name="${BASH_SOURCE[0]}"
actual_name="$(readlink -f "${first_name}")"
local_path="$(dirname "${actual_name}")"

. "${local_path}/logging"

docker::invoke() {
    sudo -A docker "$@"
}

docker::image() {
    local _image="${1:?Provide a container image}" ### <image>[:<tag>] ###
    local _tag

    read _image _tag <<< "$(echo "${_image}" | sed -e 's/[\:]/ /1')"

    local _matches="$(docker::invoke images "${_image}" | awk '{if ($2 == tag) {print $0;}}' tag="${_tag}" | wc -l)"

    if [ ${_matches} -gt 0 ]
    then
        logging::info "Image ${_image} is present"
        return 0
    fi

    logging::warning "Importing image ${_image}"
    exit 255 ### DEBUG ###
    docker::invoke pull "${_image}"
}

docker::get_instance_name() {
    local _group="${1:?Provide a group name}"
    local _service="${2:?Provide an service name}"
    local _instance_name="$(echo "${_group}...${_service}" | tr '[A-Z]' '[a-z]')"
    echo "${_instance_name}"
}

docker::cleanup_instance() {
    local _group="${1:?Provide a group name}"
    local _service="${2:?Provide an service name}"
    local _instance_name="$(docker::get_instance_name "${_group}" "${_service}")"
    local _container_id

    docker::stop_instance "${_group}" "${_service}"

    docker::invoke ps -a --filter "name=${_instance_name}" | awk '{if (NR > 1) {print $1;}}' | while read _container_id
    do
        logging::warning "Removing instance ${_instance_name} as ${_container_id}"
        docker::invoke rm "${_container_id}"
    done

    docker::invoke rmi "${_instance_name}"
}

docker::stop_instance() {
    local _group="${1:?Provide a group name}"
    local _service="${2:?Provide an service name}"
    local _instance_name="$(docker::get_instance_name "${_group}" "${_service}")"
    local _container_id=

    docker::invoke ps --filter "name=${_instance_name}" --filter "status=running" | awk '{if (NR == 2) {print $1;}}' | while read _container_id
    do
        logging::warning "Stopping instance ${_instance_name} as ${_container_id}"
        docker::invoke kill "${_container_id}"
    done
}

docker::start_instance() {
    local _group="${1:?Provide a group name}"
    local _image="${2:?Provide a container image}"
    local _service="${3:?Provide an service name}"
    local _startup_folder="${4}"

    local _instance_name="$(docker::get_instance_name "${_group}" "${_service}")"
    local _container_id="$(docker::invoke ps --filter "name=${_instance_name}" --filter "status=running" | awk '{if (NR == 2) {print $1;}}')"
    local _boot_folder_spec=
    local _init_folder_spec=
    local _other_folder_spec=

    if [ -n "${_container_id}" ]
    then
        logging::info "${_instance_name} is already running"
        echo "${_instance_name}"
        return 0
    fi

    local _container_id="$(docker::invoke ps --filter "name=${_instance_name}" --filter "status=exited" | awk '{if (NR == 2) {print $1;}}')"

    if [ -n "${_container_id}" ]
    then
        logging::warning "Restarting stopped service instance(s) ${_instance_name}"

        if docker::invoke start  "${_container_id}"
        then
            echo "${_instance_name}"
            return 0
        fi
    fi

    logging::warning "Cleaning up previous service instance(s) of ${_instance_name}"

    # Cleanup all prexisting containers
    docker::cleanup_instance "${_group}" "${_service}"

    if [ -n "${_startup_folder}" ]
    then
        logging::info "Using contents of startup folder '${_startup_folder}'"

        if [ -d "${_startup_folder}/boot" ]
        then
            _boot_folder_spec="--volume=${_startup_folder}/boot:/mnt/boot"
        fi

        if [ -d "${_startup_folder}/install" ]
        then
            _init_folder_spec="--volume=${_startup_folder}/boot:/mnt/install"
        fi
    fi

    for ((i=0; i < 2; ++i)) {
        # Try and 'boot' from a prepared image

        docker::invoke run \
            --name="${_instance_name}" \
            --privileged \
            --detach \
            ${_boot_folder_spec} \
            ${_other_folder_spec} \
            "${_instance_name}" \
            /bin/bash -cx "/mnt/boot/run; exec sleep 86400"

        if [ $? = 0 ]
        then
            logging::info "Started instance '${_instance_name}'"
            echo "${_instance_name}"
            return 0
        fi

        logging::warning "Configuring new image for instance '${_instance_name}'"

        # No image exists, so 'install' from the base image
        docker::image "${_image}"

        local _uuid="$(uuidgen)" # Temporary name for the image build container

        # Create a new container and initialize/install components and wait while it runs
        docker::invoke run \
            --name="${_uuid}" \
            --privileged \
            ${_init_folder_spec} \
            ${_other_folder_spec} \
            "${_image}" \
            /bin/sh -c '/mnt/install/run || true'

        # Commit our new image
        docker::invoke commit \
            "${_uuid}" \
            "${_instance_name}"

        docker::invoke rm "${_uuid}"
    }

    logging::warning "Couldn't create or start ${_instance_name}"
    return 255
}

docker::rebuild_instance() {
    local _group="${1:?Provide a group name}"
    local _image="${2:?Provide a container image}"
    local _service="${3:?Provide an service name}"
    local _startup_folder="${4}"

    docker::stop_instance "${_group}" "${_service}"
    docker::cleanup_instance "${_group}" "${_service}"
    docker::start_instance "${_group}" "${_image}" "${_service}"
}

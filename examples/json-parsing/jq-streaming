#!/usr/bin/env bash

TOPIC="demo/timer"

payload1() {
    cat <<< "
        {\"step\":
        $i} [1,32,3,4]
        {1,2,3,4}
    "
}

payload2() {
    echo "{\"time\": \"$(date +'%T')\","
    echo "\"demo\": 1"
}

plain_emitter() {
    payload1
}

looped_emitter() {
    echo "[\"FIRST\"]"

    for ((i=0; i < 2; ++i))
    do
        payload1
        sleep 1
    done

    echo "[\"LAST\"]"
}

mqtt-emitter() {
    while true
    do
        mosquitto_pub -h localhost -t "${TOPIC}" -m "$(payload2)"
        sleep 2
    done
}

unused_stream3() {
    stdbuf -i0 -o0 jq --unbuffered -r -R 'try fromjson? | .' |
    stdbuf -i0 -o0 jq --unbuffered -j '(. | tojson) + "\u0000"'
}

unused_stream4() {
    stdbuf -i0 -o0 jq --unbuffered -j -r -R 'fromjson? | (. | tojson) + "\u0000"'
}

unused_stream1() {
    while true
    do
        read -t 2 _buffer || break
        (echo "${_buffer}"; cat) | stdbuf -i0 -o0 jq --unbuffered -j '(. | tojson) + "\u0000"'
        echo "ERROR: $?" >&2
    done
}

receiver() {
    while read -t 3 -d $'\0' _json
    do
        echo "${_json}" | jq -r '.'
        echo "=============="
    done
}

unused_reader1() {
    while true
    do
        stdbuf -i0 -o0 jq --unbuffered -j '(. | tojson) + "\u0000"' | while read -t 3 -d $'\0' _json
        do
            _readstatus=$?
            echo "ERROR: $_readstatus" >&2
            echo "${_json}"
            echo "==========="
        done
    done
}

reader2() {
    local _payload _indicator _error

    while _payload=$(stdbuf -i0 -o0 jq --unbuffered -r -n 'try input catch ("ERROR=" + .)')
    do
        read _indicator _error <<< "$(awk -F= '{if (NR == 1) {print $1, $2;}}' <<< "${_payload}")"

        case "${_indicator}" in
            ERROR)
                case "${_error}" in
                    break)
                        break
                        ;;

                    *)
                        echo ERROR ${_error} >&2
                        ;;
                esac
                ;;

            *)
                echo "${_payload}" | jq --unbuffered -j '(. | tojson) + "\u0000"'
                ;;
        esac
    done
}

reader3() {
    local _payload

    while true
    do
        _payload="$(stdbuf -i0 -o0 jq -n -r --unbuffered 'inputs | (try .)')"
        [[ "${_payload}" = "" ]] && break
        echo "${_payload}" | jq --unbuffered -j '(. | tojson) + "\u0000"'
    done
}

looped_demo() {
    looped_emitter | reader3 | receiver
}

mqtt_demo() {
    local _pid=nopid

    onexit() {
        kill "${_pid}"
        wait "${_pid}"
    }

    mqtt-emitter & _pid=$!
    trap 1 2 3 onexit
    mosquitto_sub -h localhost -t "${TOPIC}"
}

mqtt_demo
